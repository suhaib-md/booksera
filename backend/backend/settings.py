"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize django-environ
env = environ.Env(
    # set casting and default values for environment variables
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, []),
    FRONTEND_URL=(str, 'http://localhost:3000'), # Default for local dev
    GOOGLE_BOOKS_API_KEY=(str, ''), # Provide a default empty string
    TMDB_API_KEY=(str, ''), # Provide a default empty string
)

# Read .env file in the root directory for local development
# This line will be ignored by Render's environment variable system
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# API Keys (read from environment variables)
# IMPORTANT: You MUST set these environment variables in your Render dashboard
GOOGLE_BOOKS_API_KEY = env("GOOGLE_BOOKS_API_KEY")
TMDB_API_KEY = env("TMDB_API_KEY")

# External API URLs (constants)
GOOGLE_BOOKS_API_URL = 'https://www.googleapis.com/books/v1/volumes'

# Media files settings
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Authentication URLs
LOGIN_URL = '/api/login/'
LOGIN_REDIRECT_URL = '/api/user/'

# SECURITY WARNING: keep the secret key used in production secret!
# This reads from the SECRET_KEY environment variable.
# The second argument is a fallback for local development if the env var isn't set.
SECRET_KEY = env('SECRET_KEY', default='5(tp99z9-e6m!0wzkav4d=a9+i=vsep$-ywo+k(uc)%fe0u6w(') # Replace with a strong default for local dev


# SECURITY WARNING: don't run with debug turned on in production!
# Reads DEBUG from environment variable, defaults to False
DEBUG = env('DEBUG')

# Allowed hosts for the Django application
# Reads from ALLOWED_HOSTS environment variable (comma-separated)
# Example for Render: your-django-backend.onrender.com,your-vercel-frontend.vercel.app
ALLOWED_HOSTS = env('ALLOWED_HOSTS')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'books',
    'users',
    'communities',
    'media_recommendations',
]

# Static files configuration for WhiteNoise
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Middleware order is crucial for security and functionality
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Must be very high, before CommonMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware', # After SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS Configuration
CORS_ALLOW_CREDENTIALS = True # Allow cookies/authentication headers to be sent cross-origin

# Explicitly list allowed origins for security.
# Reads from FRONTEND_URL environment variable (comma-separated if multiple).
# IMPORTANT: Set FRONTEND_URL in Render to your Vercel frontend URL (e.g., https://your-vercel-frontend.vercel.app)
CORS_ALLOWED_ORIGINS = [env('FRONTEND_URL')]

# Removed CORS_ALLOW_ALL_ORIGINS = True as it overrides CORS_ALLOWED_ORIGINS and is less secure for production.

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF Configuration
# IMPORTANT: Set CSRF_TRUSTED_ORIGINS in Render to include your Vercel frontend URL
# Example: CSRF_TRUSTED_ORIGINS=https://your-vercel-frontend.vercel.app
CSRF_TRUSTED_ORIGINS = env('CSRF_TRUSTED_ORIGINS', default='http://localhost:5173').split(',')


# JWT Authentication settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

AUTHENTICATION_BACKENDS = [
    'users.backends.CustomAuthBackend',  # ✅ Custom authentication (allows username & email)
    'django.contrib.auth.backends.ModelBackend',  # ✅ Default authentication
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

#DATABASES = {
 #   'default': {
  #      'ENGINE': 'django.db.backends.postgresql',
   #     'NAME': 'booksera',  
    #    'USER': 'postgres',
     #   'PASSWORD': 'root',
      #  'HOST': 'localhost',
       # 'PORT': '5432',
    #}
#}

DATABASES = {
    'default': dj_database_url.parse(os.environ.get('DATABASE_URL', 'sqlite:///db.sqlite3'))
}

# Custom User Model
AUTH_USER_MODEL = "users.CustomUser"

# Session and CSRF Cookie Settings
SESSION_ENGINE = "django.contrib.sessions.backends.db" # Store sessions in PostgreSQL
SESSION_COOKIE_NAME = "sessionid"
SESSION_COOKIE_SECURE = not DEBUG # True in production (HTTPS), False in local dev (HTTP)
SESSION_COOKIE_HTTPONLY = True # Prevent client-side JavaScript access
SESSION_COOKIE_SAMESITE = "Lax" # 'Lax' is generally good for cross-site requests
SESSION_COOKIE_AGE = 86400 # 24 hours
SESSION_SAVE_EVERY_REQUEST = True
# For cross-domain cookies with credentials, it's often best to let the browser handle the domain
# by NOT setting SESSION_COOKIE_DOMAIN and CSRF_COOKIE_DOMAIN explicitly,
# or setting them to None, unless you have a specific subdomain setup.
SESSION_COOKIE_DOMAIN = None # Set to None for production or your actual domain if needed
CSRF_COOKIE_DOMAIN = None # Set to None for production or your actual domain if needed
CSRF_COOKIE_SAMESITE = "Lax" # Match session cookie samesite
CSRF_COOKIE_SECURE = not DEBUG # True in production (HTTPS), False in local dev (HTTP)

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Rate limiting settings
RATE_LIMIT_SETTINGS = {
    # Default rate limits
    'DEFAULT': {
        'DAILY_LIMIT': 50,  # 50 requests per day per user/IP
    },
    
    # User role-based rate limits
    'USER_TYPES': {
        'anonymous': 20,     # Anonymous users get 20 requests per day
        'standard': 50,      # Standard users get 50 requests per day
        'premium': 200,      # Premium users get 200 requests per day
        'admin': 1000,       # Admins get 1000 requests per day
    },
    
    # API endpoint specific limits (can override the defaults)
    'ENDPOINTS': {
        'search_books': {
            'anonymous': 10,
            'standard': 30,
            'premium': 100,
        },
        'browse_category': {
            'anonymous': 5,
            'standard': 20,
            'premium': 100,
        },
    },
    
    # Cache settings for rate limiting
    'CACHE_PREFIX': 'rate_limit_',
    'CACHE_TTL': 86400,  # 24 hours in seconds (daily reset)
}


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'django_cache_table',
    }
}

